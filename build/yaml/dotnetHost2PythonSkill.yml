#
# Build a C# Host bot. Deploy it and a Python Skill bot and run functional tests.
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)
trigger: none
pr: none

variables:
  BotGroup: '$(BotName)-RGGG'
  BuildConfiguration: 'Debug'
  BuildPlatform: 'any cpu'
  runCodesignValidationInjection: false
  # AzureDeploymentPassword: define in Azure
  # AzureDeploymentUser: define in Azure
  # AzureSubscription: define in Azure
  # BotBuilderPackageVersionHost: (optional) define in Azure
  # BotBuilderPackageVersionSkill: (optional) define in Azure
  # DeleteResourceGroup: (optional) define in Azure
  # DotNetPyHostAppId: define in Azure
  # DotNetPyHostAppSecret: define in Azure
  # DotNetPyHostBotName: define in Azure
  # DotNetPySkillAppId: define in Azure
  # DotNetPySkillAppSecret: define in Azure
  # DotNetPySkillBotName: define in Azure
  # NetCoreSdkVersionHost: define in Azure
  # RegistryUrlSkill: (optional) define in Azure
  # RegistryUrlHost (Optional): define this in Azure
  # TestFilter: (optional) define in Azure. Example: '&TestCategory!=SkipForV3Bots'

pool:
  vmImage: 'windows-2019'

stages:
- stage: Prepare
  condition: and(succeeded(), ne(variables['DeleteResourceGroup'], 'false'))
  jobs:
    - job: Delete_Preexisting_Resources
      variables:
        HostBotName: $(DotNetPyHostBotName)
        SkillBotName: $(DotNetPySkillBotName)
      steps:
      - template: cleanResourcesStep.yml

- stage: Build
  dependsOn: []    # makes this run in parallel
  jobs:
    - job: Validate_Host_NetCore_Version
      variables:
        Parameters.netCoreSdkVersion: $(NetCoreSdkVersionHost)
      steps:
      - template: dotnetValidateNetCoreSdkVersion.yml

    - job: Build_Host_Bot
      dependsOn: Validate_Host_NetCore_Version
      variables:
        Registry: $[variables.RegistryUrlHost]
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionHost]
        BotType: Host
      steps:
      - template: dotnetSetPaths.yml
      - template: dotnetInstallPackagesSteps.yml
      - template: dotnetBuildSteps.yml
      - template: dotnetTagBotBuilderVersion.yml

- stage: Deploy
  dependsOn:
  - Prepare
  - Build
  condition: succeeded('Build')
  jobs:
    - job: Deploy_Host
      variables:
        HostBotName: $(DotNetPyHostBotName)
        SkillBotName: $(DotNetPySkillBotName)
        SkillAppId: $(DotNetPySkillAppId)
        BotName: $(DotNetPyHostBotName)
        DeployAppId: $(DotNetPyHostAppId)
        DeployAppSecret: $(DotNetPyHostAppSecret)
        Registry: $[variables.RegistryUrlHost]
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionHost]
        BotType: Host
      steps:
      - template: dotnetSetPaths.yml
      - template: dotnetSetConfigFileSteps.yml
      - template: dotnetDeploySteps.yml

    - job: Deploy_Skill
      #dependsOn: Deploy_Host
      variables:
        BotName: $(DotNetPySkillBotName)
        DeployAppId: $(DotNetPySkillAppId)
        DeployAppSecret: $(DotNetPySkillAppSecret)
        Registry: $[variables.RegistryUrlSkill]
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionSkill]
        Parameters.sourceLocation: 'Bots/Python/Skills/CodeFirst/EchoSkillBot'
        TemplateLocation: 'Bots/Python/Skills/CodeFirst/EchoSkillBot/deploymentTemplates/template-with-preexisting-RGGG.json'
        # To use template-with-new-RGGG.json when Deploy_Host and Deploy_Skill run in parallel gets 'Azure Error: DeploymentActive'.
        #TemplateLocation: 'Bots/Python/Skills/CodeFirst/EchoSkillBot/deploymentTemplates/template-with-new-RGGG.json'
      steps:
      - template: pythonDeployStepsExistingRG.yml
      #- template: pythonDeployStepsNewRG.yml

    - job: Configure_OAuth
      dependsOn: Deploy_Skill
      steps:
      - task: AzureCLI@1
        displayName: 'Configure skill OAuth connection'
        inputs:
          azureSubscription: $(AzureSubscription)
          scriptLocation: inlineScript
          inlineScript: |
           call az bot show -g "$(DotNetPySkillBotName)-RGGG" -n "$(DotNetPySkillBotName)"
           call az bot authsetting create -g "$(DotNetPySkillBotName)-RGGG" -n "$(DotNetPySkillBotName)" -c TestOAuthProvider --client-id "$(DotNetPySkillAppId)" --client-secret '$(DotNetPySkillAppSecret)'' --service "oauth2" --provider-scope-string '""' --parameters authorizationUrl=https://webjobs.botframework.com/api/testauthprovider/authorize tokenUrl=https://webjobs.botframework.com/api/testauthprovider/token refreshUrl=https://webjobs.botframework.com/api/testauthprovider/refresh clientId="$(DotNetPySkillAppId)" clientSecret="$(DotNetPySkillAppSecret)"
        condition: always()

- stage: Test
  dependsOn: Deploy
  jobs:
    - job: Run_Functional_Test
      variables:
        HostBotName: $(DotNetPyHostBotName)
        Parameters.project: 'Tests/SkillFunctionalTests/SkillFunctionalTests.csproj'
        Parameters.solution: 'SkillFunctionalTests.sln'
        DefaultTestFilter: ''
        DotNetTestFilter: $[ coalesce( variables['TestFilter'], variables['DefaultTestFilter'] ) ]
      steps:
      - template: functionalTestSteps.yml

- stage: Cleanup
  dependsOn:
  - Deploy
  - Test
  condition: and(always(), ne(variables['DeleteResourceGroup'], 'false'))
  jobs:
    - job: Delete_RG
      steps:
      - task: AzureCLI@1
        displayName: 'Delete Resource Group'
        inputs:
          azureSubscription: $(AzureSubscription)
          scriptLocation: inlineScript
          inlineScript: |
           call az group delete -n "$(DotNetPyHostBotName)-RGGG" --yes
           call az group delete -n "$(DotNetPySkillBotName)-RGGG" --yes
        condition: and(always(), ne(variables['DeleteResourceGroup'], 'false'))
